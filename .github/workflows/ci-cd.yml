name: CI/CD Pipeline for Node.js application

on:
  pull_request:
    branches:
      - main  # Trigger on pull request to main branch
 
jobs:
  # Job to build, test, and push Docker image to the registry
  build-and-deploy:
    runs-on: ubuntu-latest  

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        npm install

    # Step 4: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/node-app:${{ github.sha }} .

    # Step 5: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 6: Push Docker image to Docker Hub
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/node-app:${{ github.sha }}

    # Step 7: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.24.0'  # Kubernetes CLI version

    # Step 8: Set up kubeconfig for Kubernetes cluster (e.g., using GitHub secrets)
    - name: Set up kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config  # Kubernetes kubeconfig from secrets

    # Step 9: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f deployment.yaml  # Deploy the app using your Kubernetes manifests
        kubectl apply -f service.yaml  # Ensure service is exposed as needed

    # Step 10: Notify Success/Failure 
    - name: Notify Deployment Status
      run: |
        if [ $? -eq 0 ]; then
          echo "Deployment Successful"
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment Successful"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          echo "Deployment Failed"
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment Failed"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

